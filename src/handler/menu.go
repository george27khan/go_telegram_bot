package handler

import (
	"context"
	"fmt"
	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"github.com/go-telegram/ui/keyboard/inline"
	"go_telegram_bot/src/Petrovich"
	emp "go_telegram_bot/src/database/employee"
	fill "go_telegram_bot/src/database/fill_table"
	usr "go_telegram_bot/src/database/user"
	"go_telegram_bot/src/state"
	"io"
	"net/http"
	"net/mail"
	"strconv"
	"time"
)

// —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
const dateFormat string = "02.01.2006"

// —à–∞–±–ª–æ–Ω url –¥–ª—è –±–æ—Ç–∞
const fileDownloadURL string = "https://api.telegram.org/file/bot%s/%s" //https://api.telegram.org/file/bot<token>/<file_path>

var (
	lang       string // —è–∑—ã–∫ –¥–ª—è —á–∞—Ç–∞
	empCash    = map[int64]*emp.Employee{}
	declension *Petrovich.Rules
)

// highlightTxt —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–ª–µ–≥—Ä–∞–º–º
func highlightTxt(str string) string {
	return "<b>" + str + "</b>"
}

// menuKeyboard —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é
func menuKeyboard(b *bot.Bot) *inline.Keyboard {
	return inline.New(b).
		Row().
		Button("üìÜ –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º", []byte(""), CalendarHandler).
		Row().
		Button("üìù –ó–∞–ø–∏—Å–∏", []byte(""), entryHandler).
		Row().
		Button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", []byte(""), settingHandler).
		Row().
		Button("‚ùå –í—ã—Ö–æ–¥", []byte(""), cancelHandler)
}

// StartHandler —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
func StartHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.Message.From.LanguageCode == "ru" {
		lang = "ru"
	} else {
		lang = "en"
	}
	if isExist, err := usr.IsExists(ctx, update.Message.From.Username); err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–∞ –±–∑–µ—Ä–∞ ", err.Error())
	} else {
		if !isExist {
			if err := usr.Insert(ctx, update.Message.From.ID, update.Message.From.Username, update.Message.From.FirstName, update.Message.From.LastName, ""); err != nil {
				fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —é–∑–µ—Ä–∞ ", err.Error())
			}
		}
	}

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      update.Message.Chat.ID,
		Text:        highlightTxt("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"),
		ReplyMarkup: menuKeyboard(b),
		ParseMode:   models.ParseModeHTML,
	})
}

// settingHandler —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
func settingHandler(ctx context.Context, b *bot.Bot, mes *models.Message, _ []byte) {
	kb := inline.New(b).
		Row().
		Button("–î–æ–ª–∂–Ω–æ—Å—Ç—å", []byte(""), positionSettingHandler).
		Row().
		Button("–°–æ—Ç—Ä—É–¥–Ω–∏–∫", []byte(""), empSettingHandler).
		Row().
		Button("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", []byte(""), empInitHandler).
		Row().
		Button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", []byte(""), BackStartHandler)

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      mes.Chat.ID,
		Text:        highlightTxt("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"),
		ReplyMarkup: kb,
		ParseMode:   models.ParseModeHTML,
	})
}

// empInitHandler —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
func empInitHandler(ctx context.Context, b *bot.Bot, mes *models.Message, _ []byte) {
	if err := fill.AddPositions(ctx); err != nil {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    mes.Chat.ID,
			Text:      highlightTxt("–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü " + err.Error()),
			ParseMode: models.ParseModeHTML,
		})
		return
	}

	if err := fill.AddEmployees(ctx); err != nil {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    mes.Chat.ID,
			Text:      highlightTxt("–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü " + err.Error()),
			ParseMode: models.ParseModeHTML,
		})
		return
	}
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:    mes.Chat.ID,
		Text:      highlightTxt("–¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"),
		ParseMode: models.ParseModeHTML,
	})
}

func downloadFile(URL string) ([]byte, error) {
	//Get the response bytes from the url
	var bytes []byte
	response, err := http.Get(URL)
	if err != nil {
		return nil, err
	}
	defer response.Body.Close()
	if response.StatusCode == http.StatusOK {
		bytes, err = io.ReadAll(response.Body)
		if err != nil {
			return nil, err
		}
	}
	return bytes, nil
}

// DefaultHandler –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
func DefaultHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	userIdStr := strconv.FormatInt(update.Message.From.ID, 10)
	userId := update.Message.From.ID
	res := state.Get(ctx, "user_state", userIdStr)
	fmt.Println(res)
	if res == "PositionAddHandler" {
		addPosition(ctx, b, update)
	} else if res == "employeeFirstNameAdd" {
		employee := new(emp.Employee)
		employee.FirstName = update.Message.Text
		empCash[userId] = employee
		empAddAttr(ctx, b, update.Message, "employeeMiddleNameAdd")
	} else if res == "employeeMiddleNameAdd" {
		empCash[userId].MiddleName = update.Message.Text
		empAddAttr(ctx, b, update.Message, "employeeLastNameAdd")
	} else if res == "employeeLastNameAdd" {
		empCash[userId].LastName = update.Message.Text
		empAddAttr(ctx, b, update.Message, "employeeBirthDateAdd")
	} else if res == "employeeBirthDateAdd" {
		if date, err := time.Parse(dateFormat, update.Message.Text); err == nil {
			empCash[userId].BirthDate = date
			empAddAttr(ctx, b, update.Message, "employeeEmailAdd")
		} else {
			empAddAttr(ctx, b, update.Message, "employeeBirthDateAdd")
		}
	} else if res == "employeeEmailAdd" {
		if _, err := mail.ParseAddress(update.Message.Text); err == nil {
			empCash[userId].Email = update.Message.Text
			empAddAttr(ctx, b, update.Message, "employeePhoneNumberAdd")
		} else {
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID:    update.Message.Chat.ID,
				Text:      highlightTxt("–í–≤–µ–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é."),
				ParseMode: models.ParseModeHTML,
			})
			empAddAttr(ctx, b, update.Message, "employeeEmailAdd")
		}
	} else if res == "employeePhoneNumberAdd" {
		empCash[userId].PhoneNumber = update.Message.Text
		empAddAttr(ctx, b, update.Message, "employeePhotoAdd")
	} else if res == "employeePhotoAdd" {
		var (
			fileId string
			url    string
		)
		if update.Message.Document != nil && update.Message.Document.MimeType == "image/jpeg" {
			fileId = update.Message.Document.FileID
		} else if update.Message.Photo != nil {
			fileId = update.Message.Photo[len(update.Message.Photo)-1].FileID
		}
		if fileId != "" {
			if file, err := b.GetFile(ctx, &bot.GetFileParams{FileID: fileId}); err == nil {
				url = fmt.Sprintf(fileDownloadURL, "5844620699:AAGbEPIFWKxTDr0jR_A77Rba95jtZBSQlGM", file.FilePath)
				if photo, err := downloadFile(url); err == nil {
					empCash[userId].Photo = photo
					empAddAttr(ctx, b, update.Message, "employeeHireDateAdd")
				} else {
					empAddAttr(ctx, b, update.Message, "employeePhotoAdd")
				}
			} else {
				empAddAttr(ctx, b, update.Message, "employeePhotoAdd")
			}
		} else {
			empAddAttr(ctx, b, update.Message, "employeePhotoAdd")
		}
	} else if res == "employeeHireDateAdd" {
		if date, err := time.Parse(dateFormat, update.Message.Text); err == nil {
			empCash[userId].HireDate = date
			empPositionAdd(ctx, b, update.Message, "empPositionAdd")
		} else {
			fmt.Println(err)
			empAddAttr(ctx, b, update.Message, "employeeHireDateAdd")
		}
	} else {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    update.Message.Chat.ID,
			Text:      highlightTxt("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Ç—Å–∏–≤–µ –∏–∑ –º–µ–Ω—é"),
			ParseMode: models.ParseModeHTML,
		})
	}

}

// cancelHandler –ø—É—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –º–µ–Ω—é
func cancelHandler(_ context.Context, _ *bot.Bot, _ *models.Message, _ []byte) {}

// BackStartHandler —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
func BackStartHandler(ctx context.Context, b *bot.Bot, mes *models.Message, _ []byte) {
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: mes.Chat.ID,
		Text:   "/start",
	})
}

// BackSettingHandler —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
func BackSettingHandler(ctx context.Context, b *bot.Bot, mes *models.Message, data []byte) {
	settingHandler(ctx, b, mes, data)
}

func init() {
	declension, _ = Petrovich.LoadRules("./src/Petrovich/rules.json")
}
